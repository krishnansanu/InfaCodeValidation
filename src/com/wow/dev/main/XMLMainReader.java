package com.wow.dev.main;

import java.io.File;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import org.w3c.dom.Document;

import com.itextpdf.text.Chunk;
import com.wow.dev.infanodes.Config;
import com.wow.dev.infanodes.Folder;
import com.wow.dev.infanodes.InfaXMLNodes;
import com.wow.dev.infanodes.Mapping;
import com.wow.dev.infanodes.Repository;
import com.wow.dev.infanodes.Session;
import com.wow.dev.infanodes.Source;
import com.wow.dev.infanodes.Target;
import com.wow.dev.infanodes.Workflow;


public class XMLMainReader 
{  
	public static void main(String[] args)  
	{
		String repositoryName = args[0];
		String folderName = args[1];
		String workflowName = args[2];
		String peerReviewerName = args[3];


		//Creation of Arraylist to catpure information, errors and warnings from the input XML
		ArrayList<String> infoList,errorList,warningList;
		errorList=new ArrayList<String>();
		infoList=new ArrayList<String>();
		warningList=new ArrayList<String>();
		
		// Reading XML and extracting NodeDetails from XML file.
		ExtractXMLDetails xmlDetails = new ExtractXMLDetails(workflowName+".xml");
		
		extractValidate("SOURCE", xmlDetails, infoList,errorList, warningList,folderName);System.out.println("");
		extractValidate("TARGET", xmlDetails, infoList,errorList, warningList, folderName);System.out.println("");
		extractValidate("MAPPING", xmlDetails, infoList,errorList, warningList, folderName);System.out.println("");
		extractValidate("SESSION", xmlDetails, infoList,errorList, warningList, folderName);System.out.println("");
		extractValidate("WORKFLOW", xmlDetails, infoList,errorList, warningList, folderName);System.out.println("");
		
		
		//Adding details to infoList to Display details in Report...
		infoList.add("Workflow Name         : " + workflowName);
		infoList.add("Folder Name           : " + folderName);
		infoList.add("Repository Name       : " + repositoryName);
		
		String environment=null;
		if(repositoryName.toLowerCase().contains("dvlp"))
			environment="Development";
		else if(repositoryName.toLowerCase().contains("test"))
			environment="Test";
		else if(repositoryName.toLowerCase().contains("acpt"))
			environment="Acceptance";
		else if(repositoryName.toLowerCase().contains("prod"))
			environment="Production";

		infoList.add("Environment           : " + environment);
		infoList.add("Verification Done on  : MAPPING | SESSION | WORKFLOW | SOURCE | TARGET");
		infoList.add("Generated By           : " + peerReviewerName);
		infoList.add("Generated On           : " + new SimpleDateFormat("yyyy/MM/dd HH:mm:ss").format(new Date()));
		
		
		
		
		
		
//		configNodeList= new ArrayList<String>(); xmlDetails.getNodeDetails("CONFIG",configNodeList);		System.out.println(configNodeList);		

		
		Result result = new Result(workflowName);
		result.openDocument();
		result.generateOutput(errorList, infoList);
		result.closeDocument();
//		result.generatePDF();
	
	}
	
	private static InfaXMLNodes[] extractValidate(String nodeName, ExtractXMLDetails xmlDetails, ArrayList<String> infoList,ArrayList<String> errorList, ArrayList<String> warningList,String folderName) {
	
		InfaXMLNodes[] infaXML= null; 
				
		switch(nodeName) {
			case "SOURCE": infaXML=(Source[]) xmlDetails.extractDetailsToMap(nodeName); break;
			case "TARGET": infaXML=(Target[]) xmlDetails.extractDetailsToMap(nodeName); break;
			case "MAPPING": infaXML=(Mapping[]) xmlDetails.extractDetailsToMap(nodeName); break;
			case "CONFIG": infaXML=(Config[]) xmlDetails.extractDetailsToMap(nodeName); break;
			case "SESSION": infaXML=(Session[]) xmlDetails.extractDetailsToMap(nodeName); break;
			case "WORKFLOW": infaXML=(Workflow[]) xmlDetails.extractDetailsToMap(nodeName); break;
		}
		
		for(int i=0;i<infaXML.length;i++) {
			infaXML[i].validate(infoList,errorList,warningList,folderName);
		}
		
		return infaXML;
	} 
}  